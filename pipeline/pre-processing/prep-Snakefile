
# snakemake -s prep-Snakefile --cluster-config ../cluster.yaml --cluster "sbatch --parsable --time={cluster.time} --mem={cluster.mem_mb} --nodes={cluster.nodes} --cpus-per-task={cluster.cpus-per-task} --output={cluster.output} --error={cluster.error}" --jobs 11 --use-conda --rerun-incomplete --printshellcmds --dry-run

import pandas as pd
configfile: "/home/msleeper/workflows/dmr_workflow/pipeline/config.yaml"

#### sample info ####
sample_info = pd.read_table(config["samples_tsv"], dtype=str).set_index(["accession"], drop=False)
sample_info_se = sample_info[sample_info['end_type'] == 'single_end']
sample_info_pe = sample_info[sample_info['end_type'] == 'paired_end']

#### default rule ####
rule all:
     input:
          expand("{ref_dir}/{fasta}.fa.gz", ref_dir=config["ref"]["dir"], fasta=config["ref"]["fasta"]),  # rsync_get_ref_genome output
          expand("{ref_dir}/{fasta}.fa", ref_dir=config["ref"]["dir"], fasta=config["ref"]["fasta"]),  # rsync_get_ref_genome unzipped output
          expand("{bwa_idx_dir}/{fasta}.fa.gz.bwameth.{suf}", suf=["c2t", "c2t.bwt", "c2t.pac", "c2t.ann", "c2t.amb", "c2t.sa"], bwa_idx_dir=config["ref"]["bwa_idx_dir"], fasta=config["ref"]["fasta"]), # bwameth_index_ref output
          expand("{bismark_idx_dir}", bismark_idx_dir=config["ref"]["bismark_idx_dir"]),  # bismark_index_ref output
          expand("{wgbstools_ref_dir}/{genome}", wgbstools_ref_dir=config["ref"]["wgbstools_idx_dir"], genome=config["ref"]["wgbstools_ref_name"]),  # wgbstools_init_ref output
          expand("{data_dir}/raw_sequence_files/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}.fastq", data_dir=config["data"]["dir"], sample=sample_info_se.itertuples()), # sra_get_data se output
          expand("{data_dir}/raw_sequence_files/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}_1.fastq", data_dir=config["data"]["dir"], sample=sample_info_pe.itertuples()), # sra_get_data pe R1 output
          expand("{data_dir}/raw_sequence_files/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}_2.fastq", data_dir=config["data"]["dir"], sample=sample_info_pe.itertuples()), # sra_get_data pe R2 output
          expand("{rep_dir}/quality/fastqc/pretrim/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}_fastqc.{suf}", rep_dir = config["reports_dir"], sample=sample_info_se.itertuples(), suf=["html","zip"]), # fastqc se output
          expand("{rep_dir}/quality/fastqc/pretrim/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}_1_fastqc.{suf}", rep_dir = config["reports_dir"], sample=sample_info_pe.itertuples(), suf=["html","zip"]), # fastqc pe R1 output
          expand("{rep_dir}/quality/fastqc/pretrim/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}_2_fastqc.{suf}", rep_dir = config["reports_dir"], sample=sample_info_pe.itertuples(), suf=["html","zip"]), # fastqc pe R2 output
          # expand("{data_dir}/trimmed/trim_galore/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}{suf}", data_dir=config["data"]["dir"],sample=sample_info_se.itertuples(), suf=[".fq",".fastq_trimming_report.txt"]), # trim_galore se output
          # expand("{data_dir}/trimmed/trim_galore/{sample.ref}/{sample.patient_id}/{sample.group}-{sample.srx_id}/{sample.accession}_trimmed_fastqc.{suf}", data_dir = config["data"]["dir"], sample=sample_info_se.itertuples(), suf=["html","zip"]) # fastqc se post-trim output (run by trim_galore)

##### include rules #####
include: "../rules/0_rsync_get_ref_genome.smk"
include: "../rules/0_bwameth_index_ref_genome.smk"
include: "../rules/0_bismark_index_ref_genome.smk"
include: "../rules/0_wgbstools_init_ref_genome.smk"
include: "../rules/0_sra_get_data.smk"
include: "../rules/0_fastqc_pretrim.smk"
# include: "../rules/0_trim_galore.smk"


