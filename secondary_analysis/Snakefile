#!/usr/bin/env snakemake --cluster-config ../cluster.yaml --cluster "sbatch --parsable --time={cluster.time} --mem={cluster.mem_mb} --nodes={cluster.nodes} --cpus-per-task={cluster.cpus-per-task} --output={cluster.output} --error={cluster.error} --job-name={cluster.name}" --jobs 20 --use-conda --rerun-incomplete --printshellcmds

#### snakemake secondary analysis subworkflow pipeline ####
# author: Meghan M. Sleeper
# run on farm cluster with:  snakemake --cluster-config ../cluster.yaml --cluster "sbatch --parsable --time={cluster.time} --mem={cluster.mem_mb} --nodes={cluster.nodes} --cpus-per-task={cluster.cpus-per-task} --output={cluster.output} --error={cluster.error} --job-name={cluster.name}" --jobs 20 --use-conda --rerun-incomplete --printshellcmds --rerun-triggers mtime --dry-run
# runs as a subworkflow for the DMReproducible pipeline
# purpose:
#    - to map and call methylation data from fastq files
#    - to run quality control on fastq files
#    - to annotate methylation data
#    - to run differential methylation analysis
# input: 
#    - tsv file specifying data accession numbers and associated metadata for wgbs data on SRA
#    - config file specifying reference genome and file paths
# output: 
#    - beta values for methylation data
#    - quality control reports
#    - differential methylation analysis results
#    - methylation data annotations
# overview of secondary analysis steps:
#    - map fastq files to reference genome
#    - call methylation data from mapped files
#    - run quality control on fastq files
#    - combine methylation data from multiple samples
#    - annotate methylation data

#### import modules ####
import pandas as pd
import secondary_helper_functions as hf

#### assign config ####
configfile: "../config.yaml"

#### sample info ####
sample_info = hf.get_sample_info_df(config["root"] + "/" + config["samples_tsv"])
sample_info_se = sample_info[sample_info['layout'] == 'se']
sample_info_pe = sample_info[sample_info['layout'] == 'pe']

#### set up conditional files for rule all input ####
rule_all_input_list = [
    expand("{root}/{rep_dir}/01_fastqc/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_fastqc.{suf}", root = config["root"], rep_dir = config["reports_dir"], suf=["html","zip"], se=sample_info_se.itertuples()),
    expand("{root}/{rep_dir}/01_fastqc/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_1_fastqc.{suf}", root = config["root"], rep_dir = config["reports_dir"], suf=["html","zip"], pe=sample_info_pe.itertuples()),
    expand("{root}/{rep_dir}/01_fastqc/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_2_fastqc.{suf}", root = config["root"], rep_dir = config["reports_dir"], suf=["html","zip"], pe=sample_info_pe.itertuples()),
    expand("{root}/{rep_dir}/01_fastq_screen/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_screen.{suf}", root = config["root"], rep_dir=config["reports_dir"], suf=["txt", "html"], se=sample_info_se.itertuples()),
    expand("{root}/{rep_dir}/01_fastq_screen/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_1_screen.{suf}", root = config["root"], rep_dir=config["reports_dir"], suf=["txt", "html"], pe=sample_info_pe.itertuples()),
    expand("{root}/{rep_dir}/01_fastq_screen/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_2_screen.{suf}", root = config["root"], rep_dir=config["reports_dir"], suf=["txt", "html"], pe=sample_info_pe.itertuples()),      
    expand("{root}/{data_dir}/02_trimmed_trim_galore/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed.fq", root = config["root"], data_dir=config["data_dir"], se=sample_info_se.itertuples()), # trim_galore se fastq output
    expand("{root}/{rep_dir}/02_trim_galore/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}.fastq_trimming_report.txt", root = config["root"], rep_dir=config["reports_dir"], se=sample_info_se.itertuples()), # moved trim_galore se trimming report
    expand("{root}/{rep_dir}/02_fastqc_post_trim/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_fastqc.{suf}", root = config["root"], rep_dir=config["reports_dir"], se=sample_info_se.itertuples(), suf=["html","zip"]), # fastqc report post-trim
    expand("{root}/{rep_dir}/02_fastqc_post_trim/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}_trimmed_fastqc.{suf}", root = config["root"], rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples(), read=["1", "2"], suf=["html","zip"]), # trimmed fastq outputs
    expand("{root}/{data_dir}/02_trim_galore/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}_trimmed.fq", root = config["root"], data_dir=config["data_dir"], pe=sample_info_pe.itertuples(), read=["1", "2"]), # trim_galore pe reports
    expand("{root}/{rep_dir}/02_trim_galore/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}.fastq_trimming_report.txt", root = config["root"], rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples(), read=["1", "2"]), # fastqc reports post-trim
    expand("{root}/{data_dir}/03_aligned_bismark_bwt2/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bismark_bt2.bam", root = config["root"], data_dir=config["data_dir"], se=sample_info_se.itertuples()), # mapped bam output
    expand("{root}/{rep_dir}/03_bismark_bwt2/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bismark_bt2_SE_report.txt", root = config["root"], rep_dir=config["reports_dir"], se=sample_info_se.itertuples()), # bismark_mapping se report
    expand("{root}/{data_dir}/03_aligned_bismark_bwt2/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bismark_bt2.bam", root = config["root"], data_dir=config["data_dir"], pe=sample_info_pe.itertuples()), # mapped bam output
    expand("{root}/{rep_dir}/03_bismark_bwt2/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bismark_bt2_PE_report.txt", root = config["root"], rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples()), # bismark_mapping pe report
    expand("{root}/{data_dir}/03_aligned_bwameth/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed.bam", root = config["root"], data_dir=config["data_dir"], se=sample_info_se.itertuples()), # bwameth_mapping se output
    expand("{root}/{rep_dir}/03_bwameth/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bwameth_report.txt", root = config["root"], rep_dir=config["reports_dir"], se=sample_info_se.itertuples()), # bwameth_mapping se report from stderr
    expand("{root}/{data_dir}/03_aligned_bwameth/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed.bam", root = config["root"], data_dir=config["data_dir"], pe=sample_info_pe.itertuples()), # bwameth_mapping pe output
    expand("{root}/{rep_dir}/03_bwameth/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bwameth_report.txt", root = config["root"], rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples()), # bwameth_mapping pe report from stderr 
    expand("{root}/{data_dir}/04_bismark_deduped/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplicated.bam", root = config["root"], data_dir=config["data_dir"], sample = sample_info.itertuples()), # bismark deduped bam output
    expand("{root}/{rep_dir}/04_bismark_deduplication/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplication_report.txt", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples()), # bismark deduplication report
    expand("{root}/{data_dir}/04_deduped_sambamba/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.bam", root = config["root"], data_dir=config["data_dir"], sample = sample_info.itertuples()), # sambamba deduped bam output
    expand("{root}/{data_dir}/04_deduped_sambamba/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.bam.bai", root = config["root"], data_dir=config["data_dir"], sample = sample_info.itertuples()), # sambamba deduped bam index output
    expand("{root}/{rep_dir}/04_sambamba_bwameth_dedup/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}-{sample.accession}.log", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples()), # sambamba deduplication report
    expand("{root}/{rep_dir}/04_fastqc_post_dedup_bwa/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup_fastqc.{suf}", root = config["root"], rep_dir = config["reports_dir"], suf=["html","zip"], sample = sample_info.itertuples()),
    expand("{root}/{rep_dir}/04_fastqc_post_dedup_bis/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplicated_fastqc.{suf}", root = config["root"], rep_dir = config["reports_dir"], suf=["html","zip"], sample = sample_info.itertuples()),
    expand("{root}/{rep_dir}/04_samtools_post_dedup_bwa/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.bam.stats", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples()),
    expand("{root}/{rep_dir}/04_samtools_post_dedup_bis/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplicated.bam.stats", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples()),
    ]

if config["bismark"] == False:
    rule_all_input_list.remove(expand("{root}/{data_dir}/03_aligned_bismark_bwt2/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bismark_bt2.bam", root = config["root"], data_dir=config["data_dir"], se=sample_info_se.itertuples())), # mapped bam output
    rule_all_input_list.remove(expand("{root}/{rep_dir}/03_bismark_bwt2/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bismark_bt2_SE_report.txt", root = config["root"], rep_dir=config["reports_dir"], se=sample_info_se.itertuples())), # bismark_mapping se report
    rule_all_input_list.remove(expand("{root}/{data_dir}/03_aligned_bismark_bwt2/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bismark_bt2.bam", root = config["root"], data_dir=config["data_dir"], pe=sample_info_pe.itertuples())), # mapped bam output
    rule_all_input_list.remove(expand("{root}/{rep_dir}/03_bismark_bwt2/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bismark_bt2_PE_report.txt", root = config["root"], rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples())), # bismark_mapping pe report
    rule_all_input_list.remove(expand("{root}/{data_dir}/04_bismark_deduped/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplicated.bam", root = config["root"], data_dir=config["data_dir"], sample = sample_info.itertuples())), # bismark deduped bam output
    rule_all_input_list.remove(expand("{root}/{rep_dir}/04_bismark_deduplication/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplication_report.txt", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples())), # bismark deduplication report
    rule_all_input_list.remove(expand("{root}/{rep_dir}/04_fastqc_post_dedup_bis/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplicated_fastqc.{suf}", root = config["root"], rep_dir = config["reports_dir"], suf=["html","zip"], sample = sample_info.itertuples())),
    rule_all_input_list.remove(expand("{root}/{rep_dir}/04_samtools_post_dedup_bis/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplicated.bam.stats", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples())),

if config["bwameth"] == False:
    rule_all_input_list.remove(expand("{root}/{data_dir}/03_aligned_bwameth/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed.bam", root = config["root"], data_dir=config["data_dir"], se=sample_info_se.itertuples())), # bwameth_mapping se output
    rule_all_input_list.remove(expand("{root}/{rep_dir}/03_bwameth/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bwameth_report.txt", root = config["root"], rep_dir=config["reports_dir"], se=sample_info_se.itertuples())), # bwameth_mapping se report from stderr
    rule_all_input_list.remove(expand("{root}/{data_dir}/03_aligned_bwameth/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed.bam", root = config["root"], data_dir=config["data_dir"], pe=sample_info_pe.itertuples())), # bwameth_mapping pe output
    rule_all_input_list.remove(expand("{root}/{rep_dir}/03_bwameth/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bwameth_report.txt", root = config["root"], rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples())), # bwameth_mapping pe report from stderr
    rule_all_input_list.remove(expand("{root}/{data_dir}/04_deduped_sambamba/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.bam", root = config["root"], data_dir=config["data_dir"], sample = sample_info.itertuples())), # sambamba deduped bam output
    rule_all_input_list.remove(expand("{root}/{data_dir}/04_deduped_sambamba/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.bam.bai", root = config["root"], data_dir=config["data_dir"], sample = sample_info.itertuples())), # sambamba deduped bam index output
    rule_all_input_list.remove(expand("{root}/{rep_dir}/04_sambamba_bwameth_dedup/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}-{sample.accession}.log", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples())), # sambamba deduplication report
    rule_all_input_list.remove(expand("{root}/{rep_dir}/04_fastqc_post_dedup_bwa/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup_fastqc.{suf}", root = config["root"], rep_dir = config["reports_dir"], suf=["html","zip"], sample = sample_info.itertuples())),
    rule_all_input_list.remove(expand("{root}/{rep_dir}/04_samtools_post_dedup_bwa/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.bam.stats", root = config["root"], rep_dir=config["reports_dir"], sample = sample_info.itertuples())),

# rule_all_input_list = [
# expand("{data_dir}/06_wgbstools_betas/{sample.ref}-{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}_merged.{suf}", data_dir=config["data_dir"], suf=["pat.gz", "pat.gz.csi", "beta"], sample=sample_info.itertuples()),
# expand("{root}/{data_dir}/01_raw_sequence_files/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}.fastq", root = config["root"], data_dir=config["data_dir"], se=sample_info_se.itertuples()), # sra_get_data se output
# expand("{root}/{data_dir}/01_raw_sequence_files/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}{suf}", root = config["root"], data_dir=config["data_dir"], pe=sample_info_pe.itertuples(), suf={"_1.fastq", "_2.fastq"}), # sra_get_data pe R1 and R2 output
#      expand("{data_dir}/06_wgbstools_betas/{sample.ref}-{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}_merged.{suf}", data_dir=config["data_dir"], suf=["pat.gz", "pat.gz.csi", "beta"], sample=sample_info.itertuples()), 
#      expand("{rep_dir}/summary/01-06_bis_multiqc.html", rep_dir=config["reports_dir"]), 
#      expand("{rep_dir}/summary/01-06_bwa_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/01_raw_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/02_trimmed_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/03_bwameth_mapping_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/03_bismark_mapping_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/04_bwa_deduped_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/04_bis_deduped_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/05_bwa_post_merge_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/05_bis_post_merge_multiqc.html", rep_dir=config["reports_dir"]),
#      expand("{rep_dir}/summary/06_bis_methyl_extract_multiqc.html", rep_dir=config["reports_dir"])
#      ]

# if config["bismark"] == False:
#      rule_all_input_list.remove(expand("{rep_dir}/summary/01-06_bis_multiqc.html", rep_dir=config["reports_dir"]))
#      rule_all_input_list.remove(expand("{rep_dir}/summary/03_bismark_mapping_multiqc.html", rep_dir=config["reports_dir"]))
#      rule_all_input_list.remove(expand("{rep_dir}/summary/04_bis_deduped_multiqc.html", rep_dir=config["reports_dir"]))
#      rule_all_input_list.remove(expand("{rep_dir}/summary/05_bis_post_merge_multiqc.html", rep_dir=config["reports_dir"]))
#      rule_all_input_list.remove(expand("{rep_dir}/summary/06_bis_methyl_extract_multiqc.html", rep_dir=config["reports_dir"]))

# if config["sra_download"] == False:
#     rule_all_input_list.remove(expand("{root}/{data_dir}/01_raw_sequence_files/{se.ref}--{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}.fastq", root = config["root"], data_dir=config["data_dir"], se=sample_info_se.itertuples())), 
#     rule_all_input_list.remove(expand("{root}/{data_dir}/01_raw_sequence_files/{pe.ref}--{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}{suf}", root = config["root"], data_dir=config["data_dir"], pe=sample_info_pe.itertuples(), suf={"_1.fastq", "_2.fastq"}))

#### default rule ####
rule all:
     input:
          rule_all_input_list

##### include rules #####
include: "rules/01_qc_reporting.smk"
include: "rules/02_trim_galore.smk"
include: "rules/03_bismark_mapping.smk"
include: "rules/03_bwameth_mapping.smk"
include: "rules/04_bismark_dedup.smk" # bismark deduplication pathway
include: "rules/04_sambamba_sort_index_dedup.smk" # bwameth deduplication pathway
include: "rules/04_qc_reporting_post_dedup.smk"


#### -- Intermediate files produced by prep-Snakefile that could be added to rule all -- ###

# Must uncomment these lines to include these intermediate files in the rule all
          # ### 01 QC reports ###
          # # 01 fastqc reports
          # expand("{rep_dir}/01_fastqc/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_fastqc.{suf}", rep_dir=config["reports_dir"], se=sample_info_se.itertuples(), suf=["html","zip"]), # se fastqc se output
          # expand("{rep_dir}/01_fastqc/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}_fastqc.{suf}", rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples(), read=["1", "2"], suf=["html", "zip"]), # pe fastqc pe R1 and R2 output
          # # 01 fastq_screen reports
          # expand("{rep_dir}/01_fastq_screen/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_screen.{suf}", se=sample_info_se.itertuples(), suf=["txt", "html"], rep_dir=config["reports_dir"]), # se fastq_screen output (other outputs: "png", "html", "bisulfite_orientation.png")
          # expand("{rep_dir}/01_fastq_screen/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}_screen.{suf}", pe=sample_info_pe.itertuples(), suf=["txt", "html"], rep_dir=config["reports_dir"], read=["1", "2"]), # pe fastq_screen output (other outputs: "png", "html", "bisulfite_orientation.png")
     
          # ### 02 trim_galore output ###
          # # 02 single end sample output: trimmed fastq, trim and fastq reports
          # expand("{data_dir}/02_trimmed_trim_galore/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed.fq", data_dir=config["data_dir"], se=sample_info_se.itertuples()), # trim_galore se fastq output
          # expand("{rep_dir}/02_trim_galore/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}.fastq_trimming_report.txt", rep_dir=config["reports_dir"], se=sample_info_se.itertuples()), # moved trim_galore se trimming report
          # expand("{rep_dir}/02_fastqc_post_trim/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_fastqc.{suf}", rep_dir=config["reports_dir"], se=sample_info_se.itertuples(), suf=["html","zip"]), # fastqc report post-trim
          # # 02 paired end sample output: trimmed fastq, trim report, and fastq reports for R1 and R2
          # expand("{rep_dir}/02_fastqc_post_trim/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}_trimmed_fastqc.{suf}", rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples(), read=["1", "2"], suf=["html","zip"]), # trimmed fastq outputs
          # expand("{data_dir}/02_trim_galore/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}_trimmed.fq", data_dir=config["data_dir"], pe=sample_info_pe.itertuples(), read=["1", "2"]), # trim_galore pe reports
          # expand("{rep_dir}/02_trim_galore/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_{read}.fastq_trimming_report.txt", rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples(), read=["1", "2"]), # fastqc reports post-trim

          # ### 03 bwameth_mapping output ###
          # # 03 single end sample output: bam and mapping report
          # expand("{data_dir}/03_aligned_bwameth/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed.bam", data_dir=config["data_dir"], se=sample_info_se.itertuples()), # bwameth_mapping se output
          # expand("{rep_dir}/03_bwameth/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bwameth_report.txt", rep_dir=config["reports_dir"], se=sample_info_se.itertuples()), # bwameth_mapping se report from stderr
          # # 03 paired end sample output: bam and mapping report
          # expand("{data_dir}/03_aligned_bwameth/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed.bam", data_dir=config["data_dir"], pe=sample_info_pe.itertuples()), # bwameth_mapping pe output
          # expand("{rep_dir}/03_bwameth/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bwameth_report.txt", rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples()), # bwameth_mapping pe report from stderr

          # ### 03 bismark_mapping output ###
          # # 03 single end sample output: bam and mapping report
          # expand("{data_dir}/03_aligned_bismark_bwt2/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bismark_bt2.bam", data_dir=config["data_dir"], se=sample_info_se.itertuples()), # mapped bam output
          # expand("{rep_dir}/03_bismark_bwt2/{se.ref}/{se.patient_id}-{se.group}-{se.srx_id}-{se.layout}/{se.accession}_trimmed_bismark_bt2_SE_report.txt", rep_dir=config["reports_dir"], se=sample_info_se.itertuples()), # bismark_mapping se report
          # # 03 paired end sample output: bam and mapping report
          # expand("{data_dir}/03_aligned_bismark_bwt2/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bismark_bt2.bam", data_dir=config["data_dir"], pe=sample_info_pe.itertuples()), # mapped bam output
          # expand("{rep_dir}/03_bismark_bwt2/{pe.ref}/{pe.patient_id}-{pe.group}-{pe.srx_id}-{pe.layout}/{pe.accession}_trimmed_bismark_bt2_PE_report.txt", rep_dir=config["reports_dir"], pe=sample_info_pe.itertuples()), # bismark_mapping pe report
        # bam = expand("{root}/{data_dir}/03_aligned_bismark_bwt2/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_bismark_bt2.bam", root = config["root"], data_dir=config["data_dir"]),
        # report = expand("{root}/{rep_dir}/03_bismark_bwt2/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_bismark_bt2_SE_report.txt", root = config["root"], rep_dir=config["reports_dir"])

          # ### 04 sambamba_sort_index_dedup output ###
          # expand("{data_dir}/04_deduped_sambamba/{sample.ref}/{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.{suf}", data_dir=config["data_dir"], sample=sample_info.itertuples(), suf=["bam", "bam.bai"]), # sambamba_dedup output
        
            # ### 04 bismark_deduplication output ###
        # bam = expand("{root}/{data_dir}/04_bismark_deduped/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplicated.bam", root = config["root"], data_dir=config["data_dir"]),
        # report = expand("{root}/{rep_dir}/04_bismark_deduplication/{sample.ref}--{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_bismark.deduplication_report.txt", root = config["root"], rep_dir=config["reports_dir"])
    
          # ### 04 QC reports ###
          # # 04 fastqc post-de-dup QC on bam output reports
          # expand("{rep_dir}/04_fastqc_post_dedup/{sample.ref}/{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup_fastqc.{suf}", rep_dir = config["reports_dir"], suf=["html","zip"], sample=sample_info.itertuples()), # fastqc se output post-dedup
          # # 04 samtools stats output
          # expand("{rep_dir}/04_samtools_post_dedup/{sample.ref}/{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}/{sample.accession}_trimmed_sorted_dedup.bam.stats", sample=sample_info.itertuples(), rep_dir=config["reports_dir"]), # samtools_stats output

          # ### 05 sambamba merge output ###
          # expand("{data_dir}/05_merged_sambamba/{sample.ref}-{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}_merged.bam", data_dir=config["data_dir"], sample=sample_info.itertuples()), # sambamba_merge output

          # ### 05 QC reports ###
          # # 05 fastqc post-merge output reports
          # expand("{rep_dir}/05_fastqc_post_merge/{sample.ref}-{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}_merged_fastqc.{suf}", rep_dir = config["reports_dir"], suf=["html","zip"], sample=sample_info.itertuples()), # fastqc post-merge output
          # # 05 featureCounts output
          # expand("{rep_dir}/05_feature_counts/{sample.ref}-{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}_merged.featureCounts{suf}", rep_dir=config["reports_dir"], suf=["", ".summary", ".jcounts"], sample=sample_info.itertuples()), # featureCounts output
          # # 05 qualimap output report directories
          # expand("{rep_dir}/05_qualimap/{sample.ref}-{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}_merged", sample=sample_info.itertuples(), rep_dir=config["reports_dir"]), # qualimap output
          # # 05 samtools stats output 
          # expand("{rep_dir}/05_samtools_post_merge/{sample.ref}-{sample.patient_id}-{sample.group}-{sample.srx_id}-{sample.layout}_merged.bam.stats", sample=sample_info.itertuples(), rep_dir=config["reports_dir"]), # samtools_stats output



onsuccess:
    print("Workflow finished, no error")

onerror:
    print("An error occurred")


